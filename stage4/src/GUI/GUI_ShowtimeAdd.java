package GUI;

import javax.swing.JOptionPane;
import stage4.TicketRelated.ShowtimeManager;
import stage4.TicketRelated.*;
import java.time.LocalTime;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import stage4.TicketRelated.MovieManager;
import stage4.TicketRelated.Screen;
import stage4.TicketRelated.ScreenManager;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author lccra
 */
public class GUI_ShowtimeAdd extends javax.swing.JFrame {

    private GUI_MovieElements guiMovieElements;
    private ArrayList<Movie> movieList;
    private ArrayList<Screen> screenList;


    
    /**
     * Creates new form GUI_ShowtimeAdd
     */
    public GUI_ShowtimeAdd() {
        initComponents();
        populateTableMovies();
        populateTableScreen();
    }
    
    public GUI_ShowtimeAdd(GUI_MovieElements guiMovieElements) {
        initComponents();
        this.guiMovieElements = guiMovieElements;
        populateTableMovies();
        populateTableScreen();
        
    }
    
    public void populateTableMovies() {
    this.movieList = MovieManager.getMovies();
    DefaultTableModel movieModel = (DefaultTableModel) this.tblAddShowtimeMovieObjects.getModel();

        
    Object[][] movieRows = new Object[movieList.size()][4];
    for (int i = 0; i < movieList.size(); i++) {
        movieRows[i][0] = movieList.get(i).getMovieID();
        movieRows[i][1] = movieList.get(i).getTitle();
            
        movieModel.addRow(movieRows[i]);
    }
    }
    
    public void populateTableScreen() {
    this.screenList = ScreenManager.getScreens();
    DefaultTableModel screenModel = (DefaultTableModel) this.tblAddShowtimeScreenObjects.getModel();
        
    Object[][] screenRows = new Object[screenList.size()][2];
    for (int i = 0; i < screenList.size(); i++) {
        screenRows[i][0] = screenList.get(i).getScreenID();
        screenRows[i][1] = screenList.get(i).getScreenType();
            
        screenModel.addRow(screenRows[i]);
        
    }
    }
  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        txtAddShowtimeID = new javax.swing.JTextField();
        lblShowtimeID = new javax.swing.JLabel();
        lblStartTime = new javax.swing.JLabel();
        btnAddShowtime = new javax.swing.JButton();
        spnAddStartTimeHour = new javax.swing.JSpinner();
        spnAddStartTimeMin = new javax.swing.JSpinner();
        lblAddShowtimeHour = new javax.swing.JLabel();
        lblAddShowtimeMin = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAddShowtimeScreenObjects = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAddShowtimeMovieObjects = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Add Showtime");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("Return");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
        getContentPane().add(txtAddShowtimeID, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 50, 139, -1));

        lblShowtimeID.setText("Showtime ID:");
        getContentPane().add(lblShowtimeID, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, -1, -1));

        lblStartTime.setText("Start Time: ");
        getContentPane().add(lblStartTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 390, -1, -1));

        btnAddShowtime.setText("Add");
        btnAddShowtime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddShowtimeActionPerformed(evt);
            }
        });
        getContentPane().add(btnAddShowtime, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 450, -1, -1));

        spnAddStartTimeHour.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));
        getContentPane().add(spnAddStartTimeHour, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 390, -1, -1));

        spnAddStartTimeMin.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        getContentPane().add(spnAddStartTimeMin, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 390, -1, -1));

        lblAddShowtimeHour.setText("Hour: ");
        getContentPane().add(lblAddShowtimeHour, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 370, -1, -1));

        lblAddShowtimeMin.setText("Minute:");
        getContentPane().add(lblAddShowtimeMin, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 370, -1, -1));

        tblAddShowtimeScreenObjects.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Screen ID", "Screen Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblAddShowtimeScreenObjects);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 90, 240, 260));

        tblAddShowtimeMovieObjects.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Movie ID", "Movie Title"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblAddShowtimeMovieObjects);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 90, 240, 260));

        setSize(new java.awt.Dimension(593, 566));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        new GUI_MovieElements().setVisible(true);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnAddShowtimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddShowtimeActionPerformed

        byte id = 0;
        
        try {
            id = Byte.parseByte(this.txtAddShowtimeID.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Showtime ID must be a number!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        
        int selectedRowMovie = this.tblAddShowtimeMovieObjects.getSelectedRow();
        
        byte movieId = 0;
        
        if (selectedRowMovie != -1) {
            this.tblAddShowtimeMovieObjects.getValueAt(selectedRowMovie, 0);
            movieId = (byte) this.tblAddShowtimeMovieObjects.getValueAt(selectedRowMovie, 0);

        }
        
        int selectedRowScreen = this.tblAddShowtimeScreenObjects.getSelectedRow();
        
        byte screenId = 0;
        
        if (selectedRowScreen != -1) {
            this.tblAddShowtimeScreenObjects.getValueAt(selectedRowScreen, 0);
            screenId = (byte) this.tblAddShowtimeScreenObjects.getValueAt(selectedRowScreen, 0);

        }
        
        int hour = (Integer) this.spnAddStartTimeHour.getValue();
        int minute = (Integer) this.spnAddStartTimeMin.getValue();
        LocalTime startTime = LocalTime.of(hour, minute);
        
        Movie searchMovie = MovieManager.searchMovie(movieId);
        Screen searchScreen = ScreenManager.searchScreen((byte) screenId);
        
        if(!ShowtimeManager.contains(id)) {
            ShowtimeManager.addShowtime(new Showtime(id,searchMovie, searchScreen, startTime));
            JOptionPane.showMessageDialog(null, "Showtime successfully added!", "Success", JOptionPane.INFORMATION_MESSAGE);

        }

        this.dispose();
        
        this.guiMovieElements.resetRowsShowtime();
        
        this.guiMovieElements.populateTableShowtime();
        
        this.guiMovieElements.setVisible(true);

    }//GEN-LAST:event_btnAddShowtimeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_ShowtimeAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_ShowtimeAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_ShowtimeAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_ShowtimeAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_ShowtimeAdd().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddShowtime;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAddShowtimeHour;
    private javax.swing.JLabel lblAddShowtimeMin;
    private javax.swing.JLabel lblShowtimeID;
    private javax.swing.JLabel lblStartTime;
    private javax.swing.JSpinner spnAddStartTimeHour;
    private javax.swing.JSpinner spnAddStartTimeMin;
    private javax.swing.JTable tblAddShowtimeMovieObjects;
    private javax.swing.JTable tblAddShowtimeScreenObjects;
    private javax.swing.JTextField txtAddShowtimeID;
    // End of variables declaration//GEN-END:variables
}
